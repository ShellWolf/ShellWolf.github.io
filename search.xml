<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BEM</title>
    <url>/2019/03/01/bem/</url>
    <content><![CDATA[<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><div class="note info"><p>原始代码出自vant组件库。 最新代码，<a href="https://github.com/youzan/vant/blob/dev/packages/utils/use/bem.ts" target="_blank" rel="noopener">点击这里</a></p></div>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在实际项目中，当我们需要覆盖某些开源组件库样式的时候，我们会发现会有一些奇怪的CSS命名方式，如下所示：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 以下是CSS类名</span><br><span class="line"><span class="selector-class">.xx__xx</span></span><br><span class="line"><span class="selector-class">.xx__xx--xx</span></span><br><span class="line"><span class="selector-class">.xx--xx</span></span><br></pre></td></tr></table></figure>
<p>为了搞清楚这种规则，通过查阅了解到这是一种叫做 <code>BEM</code>的命名方法。下面我就来了解下这个高大上的东西：</p>
<p><strong><em>BEM是一种方法，可帮助我们在前端开发中创建可重用的组件和代码共享</em></strong></p>
<p>更多中文解释见 <a href="https://www.cnblogs.com/dujishi/p/5862911.html" target="_blank" rel="noopener">https://www.cnblogs.com/dujishi/p/5862911.html</a><br>更全面详细的解释下 <a href="http://getbem.com" target="_blank" rel="noopener">http://getbem.com</a></p>
<p>通过阅读上述文章，可知BEM命名是很重要的一种规范，但是纯手写起来，会有一些繁琐，为了将这些规则更好的和vue组件的HTML Class绑定相互结合，做如下封装：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bem helper</span></span><br><span class="line"><span class="comment"> * b函数内部，默认取当前组件名称做默认类名，如下，以'button'为例</span></span><br><span class="line"><span class="comment"> * b() // 'button'</span></span><br><span class="line"><span class="comment"> * b('text') // 'button__text'</span></span><br><span class="line"><span class="comment"> * b(&#123; disabled &#125;) // 'button button--disabled'</span></span><br><span class="line"><span class="comment"> * b('text', &#123; disabled &#125;) // 'button__text button__text--disabled'</span></span><br><span class="line"><span class="comment"> * b(['disabled', 'primary']) // 'button button--disabled button--primary'</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ELEMENT = <span class="string">'__'</span></span><br><span class="line"><span class="keyword">const</span> MODS = <span class="string">'--'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> join = <span class="function">(<span class="params">name, el, symbol</span>) =&gt;</span> el ? name + symbol + el : name</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prefix = <span class="function">(<span class="params">name, mods</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> mods === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> join(name, mods, MODS)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数组语法，传递一个数组</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(mods)) &#123;</span><br><span class="line">    <span class="keyword">return</span> mods.map(<span class="function"><span class="params">item</span> =&gt;</span> prefix(name, item))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象语法，传递对象</span></span><br><span class="line">  <span class="keyword">const</span> ret = &#123;&#125;</span><br><span class="line">  <span class="built_in">Object</span>.keys(mods).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    ret[name + MODS + key] = mods[key]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    b (el, mods) &#123;</span><br><span class="line">      <span class="comment">// 获取组件名称</span></span><br><span class="line">      <span class="keyword">const</span> &#123; name &#125; = <span class="keyword">this</span>.$options</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (el &amp;&amp; <span class="keyword">typeof</span> el !== <span class="string">'string'</span>) &#123;</span><br><span class="line">        mods = el</span><br><span class="line">        el = <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">      el = join(name, el, ELEMENT)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> mods ? [el, prefix(el, mods)] : el</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将 <code>b</code> (bem的简写) 方法混入到组件中后，我们就可以直接在HTML模板中使用它，如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"b([type])"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[b('wrapper', &#123; scrollable &#125;), &#123;'thinline--bottom': type=== 'line'&#125;]"</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">expot <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'tabs'</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      type: <span class="string">'line'</span>,</span></span><br><span class="line"><span class="javascript">      scrollable: <span class="literal">true</span>,</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如上所示代码，将渲染出如下类名：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tabs--line</span></span><br><span class="line"><span class="selector-class">.tabs__wrapper</span></span><br><span class="line"><span class="selector-class">.tabs__wrapper--scrollable</span></span><br><span class="line"><span class="selector-class">.thinline--bottom</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>上述代码可以直接拷贝使用，可以在Vue项目中实际用起来看下效果啦。</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
        <category>BEM</category>
      </categories>
      <tags>
        <tag>Bem</tag>
        <tag>CSS</tag>
        <tag>Mixin</tag>
      </tags>
  </entry>
  <entry>
    <title>你真的懂 border-radius 了吗？</title>
    <url>/2019/03/08/border-radius/</url>
    <content><![CDATA[<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>以下的截图文字说明，来源于 &lt;&lt;CSS揭秘&gt;&gt; 文章的片段</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在日常开发中 <code>border-radius</code> 属性是一个非常常用和简单的属性，但是他有一个鲜为人知的真相:它可以单独指定水平 和垂直半径，只要用一个斜杠(/)分隔这两个值即可</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="为什么叫-border-radius"><a href="#为什么叫-border-radius" class="headerlink" title="为什么叫 border-radius?"></a>为什么叫 border-radius?</h4><p><img src="/images/border-radius1.png" alt="border-radius-explain"></p>
<h4 id="border-radius-的更多用法"><a href="#border-radius-的更多用法" class="headerlink" title="border-radius 的更多用法"></a>border-radius 的更多用法</h4><p><img src="/images/border-radius2.png" alt="border-radius"></p>
<p><strong><em>下面还有一个图形化的解释，结合上面的文章截图理解：</em></strong></p>
<p><img src="/images/border-radius3.png" alt="border-radius1"></p>
<h4 id="在线测试DEMO"><a href="#在线测试DEMO" class="headerlink" title="在线测试DEMO"></a>在线测试DEMO</h4><p><a href="https://codepen.io/shellWolf/pen/MxpEGb?editors=1100" target="_blank" rel="noopener">https://codepen.io/shellWolf/pen/MxpEGb?editors=1100</a></p>
]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>border-radius</tag>
      </tags>
  </entry>
  <entry>
    <title>Button 按钮组件</title>
    <url>/2019/03/04/button/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在日常开发中，button组件是使用频率比较高的组件，原生的HTML button标签只能满足一部分的使用场景，所以需要对button标签进行二次封装，来满足更多的场景。</p>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>对于一个button组件，我们对它做如下设计：</p>
<ol>
<li>保留原生HTML button标签的部分特性 （如：type, disabled等）</li>
<li>通过传入type prop，来展示不同类型的button</li>
<li>通过传入loading prop，来控制button的加载效果</li>
<li>通过传入icon prop，实现button和icon的结合</li>
<li>通过传入ripple prop，实现水波纹的点击效果</li>
<li>通过传入block prop，来控制button的宽度是否继承父容器宽度</li>
<li>提供自定义的click事件，来响应用户的点击</li>
</ol>
<p>具体设计如下所示：</p>
<p><img src="/images/button.png" alt="button"></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>组件代码如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button</span><br><span class="line">    :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[</span></span><br><span class="line"><span class="string">      b([type, size, &#123;</span></span><br><span class="line"><span class="string">        loading,</span></span><br><span class="line"><span class="string">        icon,</span></span><br><span class="line"><span class="string">        block,</span></span><br><span class="line"><span class="string">        ripple</span></span><br><span class="line"><span class="string">    &#125;])]"</span></span><br><span class="line">    :disabled=<span class="string">"disabled"</span></span><br><span class="line">    :type=<span class="string">"htmlType"</span></span><br><span class="line">    @click=<span class="string">"handleClick"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;spin v-<span class="keyword">if</span>=<span class="string">"loading"</span> size=<span class="string">"16px"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ripple v-<span class="keyword">if</span>=<span class="string">"ripple &amp;&amp; !loading &amp;&amp; !disabled"</span> :ripple-opacity=<span class="string">"rippleOpacity"</span> :ripple-color=<span class="string">"rippleColor"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;slot name=<span class="string">"icon"</span>&gt;</span><br><span class="line">      &lt;icon v-<span class="keyword">if</span>=<span class="string">"icon"</span> :name=<span class="string">"icon"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;slot/</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Spin <span class="keyword">from</span> <span class="string">'../spin'</span></span><br><span class="line"><span class="keyword">import</span> Ripple <span class="keyword">from</span> <span class="string">'../ripple'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'button'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Ripple,</span><br><span class="line">    Spin</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    disabled: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="comment">// 设置 button 原生的 type 值</span></span><br><span class="line">    htmlType: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'button'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置按钮类型</span></span><br><span class="line">    type: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'default'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    icon: <span class="built_in">String</span>,</span><br><span class="line">    loading: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="comment">// 支持large、default、small三种尺寸，默认为default， 当为默认时不需要设置</span></span><br><span class="line">    size: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">''</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 开启水波纹点击</span></span><br><span class="line">    ripple: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="comment">// 设置波纹透明度</span></span><br><span class="line">    rippleOpacity: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 设置波纹颜色，默认取字体颜色 （currentColor）</span></span><br><span class="line">    rippleColor: <span class="built_in">String</span>,</span><br><span class="line">    <span class="comment">// 将按钮宽度调整为其父宽度的选项</span></span><br><span class="line">    block: <span class="built_in">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick (event) &#123;</span><br><span class="line">      <span class="comment">// loading 和 disabled 状态下不做click 事件处理</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.loading &amp;&amp; !<span class="keyword">this</span>.disabled) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'click'</span>, event)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>提示：不同的浏览器对 <code>&lt;button&gt;</code> 元素的 type 属性使用不同的默认值, 所以我们需要给自定义的button 组件的 htmlType 属性设置默认的值为 <code>button</code></p>
</blockquote>
<p>从上可知button组件提供了2个 <code>slot</code>：</p>
<ol>
<li>默认插槽一般用于接收button组件的文本传入；</li>
<li>icon 插槽，提供给用户插入图片的途径（当icon图标不能够完全满足需求时，我们可以传入图片代替）</li>
</ol>
<p>由于它没有复杂的逻辑，基本上就是一个视图组件，接下来我们将重点分析它的样式，对应的css样式(stylus语法)代码 如下所示：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$text</span>-<span class="attribute">color</span> = <span class="number">#4a4a4a</span></span><br><span class="line"><span class="variable">$border</span>-<span class="attribute">color</span> = <span class="number">#eee</span></span><br><span class="line"><span class="variable">$gray</span>-darker = <span class="number">#666</span></span><br><span class="line"><span class="variable">$gray</span>-dark = <span class="number">#999</span></span><br><span class="line"></span><br><span class="line">.button</span><br><span class="line">  <span class="attribute">position</span>: relative</span><br><span class="line">  <span class="attribute">display</span>: inline-block</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$text</span>-color</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$white</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">34px</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">32px</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12px</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$border</span>-color</span><br><span class="line">  <span class="attribute">box-shadow</span>: none</span><br><span class="line">  <span class="attribute">text-align</span>: center</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span></span><br><span class="line">  <span class="attribute">cursor</span>: pointer</span><br><span class="line">  <span class="attribute">outline</span>: none</span><br><span class="line">  touch-action: manipulation</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap</span><br><span class="line">  user-select: <span class="attribute">none</span></span><br><span class="line">  -webkit-appearance: <span class="attribute">none</span></span><br><span class="line">  -webkit-text-size-adjust: <span class="number">100%</span></span><br><span class="line"></span><br><span class="line">  &amp;::before</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span></span><br><span class="line">    <span class="attribute">position</span>: absolute</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span></span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">1px</span></span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">1px</span></span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">1px</span></span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">1px</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">border</span>: inherit</span><br><span class="line">    <span class="attribute">border-radius</span>: inherit</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$gray</span>-darker</span><br><span class="line">    <span class="attribute">pointer-events</span>: none</span><br><span class="line">    transition: opacity .3s</span><br><span class="line"></span><br><span class="line">  &amp;:active::before</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.15</span></span><br><span class="line"></span><br><span class="line">  &amp;[disabled]</span><br><span class="line">    &amp;,</span><br><span class="line">    &amp;:focus,</span><br><span class="line">    &amp;:active</span><br><span class="line">      <span class="attribute">cursor</span>: not-allowed</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="variable">$border</span>-color</span><br><span class="line">      <span class="attribute">color</span>: <span class="variable">$gray</span>-dark</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$border</span>-color</span><br><span class="line">      <span class="attribute">box-shadow</span>: none</span><br><span class="line">    &amp;::before,</span><br><span class="line">    &amp;:active::before</span><br><span class="line">      <span class="attribute">display</span>: none</span><br></pre></td></tr></table></figure>
<p>分析上述重点样式代码：</p>
<ol>
<li>设置 <code>-webkit-appearance: none</code> 去除 button 标签默认的appearance样式，<strong><em>常用于IOS下移除原生样式</em></strong> </li>
<li>设置 <code>outline: none</code>去除外边线样式</li>
<li>设置 <code>touch-action: manipulation</code> 可减少浏览器在用户点击时延迟生成点击事件的情况</li>
<li>设置 <code>white-space: nowrap</code> 禁止组件文本换行</li>
<li>设置 <code>user-select: none</code> 阻止button组件文本被选择(复制)</li>
<li>设置 <code>-webkit-text-size-adjust: 100%</code> 关闭字体大小自动调整功能</li>
</ol>
<p>还需要注意的是，当点击button组件时，需要设置active状态下的样式，如果直接在button上改变 <code>background-color</code> 或者其它样式的值，这样将会导致额外的 layout 和 paint， 如下所示：<br><img src="/images/button-bg.png" alt="background-color trigger"></p>
<p>为了能够进行性能优化，做如下设计：</p>
<ol>
<li>将 button 组件 active 状态下的样式通过在 ‘::before’ 上设置绝对定位进行触发，这样点击button时就不会影响到其他dom的渲染</li>
<li>为了不影响button的正常点击操作，需要在伪元素上设置 <code>pointer-events: none</code> 这样点击事件就会穿透到真正到button元素上</li>
<li>通过改变 <code>opacity</code> 样式来反馈 active 状态</li>
<li>为了做更近一步的优化，我们通过设置 <code>transition</code> 样式将伪元素提升为合成层 （<strong><em>元素提升为合成层后，transform 和 opacity 才不会触发 paint，如果不是合成层，则其依然会触发 paint</em></strong>）</li>
</ol>
<div class="note info"><p>提示：(这里是引用 justjavac 大神的回答)<br>在 Blink 和 WebKit 内核的浏览器中，对于应用了 transition 或者 animation的 opacity 元素，浏览器会将渲染层提升为合成层。也可以使用 translateZ(0) 或者 translate3d(0,0,0) 来人为地强制性地创建一个合成层。</p>
<p>可以通过使用 Chrome DevTools 工具来查看页面中合成层的情况，在 <code>Rendering</code> 标签下，勾选上 Show layer borders即可</p></div>
<blockquote>
<p>✨<strong><em>请点击查看 <a href="http://wechat.hand-china.com/hippius-ui/#/zh-CN/button" target="_blank" rel="noopener">DEMO</a> 效果</em></strong></p>
</blockquote>
<p><strong><em>附录 ✨</em></strong></p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/touch-action" target="_blank" rel="noopener">touch-action</a>介绍</li>
<li><a href="https://www.cnblogs.com/zichi/p/9068481.html" target="_blank" rel="noopener">pointer-events</a>运用场景</li>
<li><a href="/2019/03/04/button/">Spin组件</a>分析</li>
<li><a href="/2019/03/05/wave/">Ripple组件</a>分析</li>
<li><a href="/2019/03/01/bem/">b函数</a>分析</li>
<li><a href="https://csstriggers.com" target="_blank" rel="noopener">CSS Triggers</a> 文档</li>
<li><a href="https://segmentfault.com/q/1010000008983727" target="_blank" rel="noopener">对于改变opacity样式时，页面渲染的疑惑</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
        <category>组件开发</category>
        <category>Button</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>Collapse 折叠面板组件</title>
    <url>/2019/03/13/collapse/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>折叠面板组件直观展示：</p>
<p><img src="/images/collapse.png" alt="collapse"></p>
<p>下面我们一起分析如何实现这个组件</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul>
<li>可以把组件拆分成父容器（collapse）和子组件（collapse-item）2个，然后在父组件上使用 <code>v-model</code> 进行双向绑定</li>
<li>子组件折叠有2种方式，第一种是普通展开模式，第二种是accordion（手风琴）模式</li>
<li>对折叠项内容展开和收起时运用动画，产生平滑过渡效果</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="Collapse-父组件"><a href="#Collapse-父组件" class="headerlink" title="Collapse 父组件"></a>Collapse 父组件</h4><p>模板代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;group :<span class="class"><span class="keyword">class</span></span>=<span class="string">"b()"</span>&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;<span class="regexp">/group&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Group <span class="keyword">from</span> <span class="string">'./group'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  name: <span class="string">'collapse'</span>,</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line">    Group,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 控制手风琴效果</span></span><br><span class="line">    accordion: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="comment">// 用于生成双向绑定</span></span><br><span class="line">    value: [<span class="built_in">String</span>, <span class="built_in">Number</span>, <span class="built_in">Array</span>],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  provide () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      Collapse: <span class="keyword">this</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      items: [],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="keyword">switch</span> (name, expanded) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.accordion) &#123;</span><br><span class="line">        name = expanded</span><br><span class="line">          ? <span class="keyword">this</span>.value.concat(name)</span><br><span class="line">          : <span class="keyword">this</span>.value.filter(<span class="function"><span class="params">activeName</span> =&gt;</span> activeName !== name)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        name = expanded</span><br><span class="line">          ? name === <span class="keyword">this</span>.value ? <span class="string">''</span> : name</span><br><span class="line">          : <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, name)</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, name)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述代码有几点需要注意的地方：</p>
<ol>
<li>provide / inject 允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效</li>
<li>通过属性 <code>value</code> 和 <code>switch</code> 方法中发射 <code>input</code> 事件，让自定义组件实现双向绑定</li>
<li>当 <code>accordion</code> 属性为真时，展开的折叠项只有一个，记录到一个字符串中即可，当为假时，可以有多个折叠项同时是展开状态，这个时候我们需要用数组记录状态</li>
</ol>
<h4 id="Collapse-Item-子组件"><a href="#Collapse-Item-子组件" class="headerlink" title="Collapse Item 子组件"></a>Collapse Item 子组件</h4><p>模板代码如下：</p>
<blockquote>
<p>raf, cancel 源码见 <a href="#collapse" style="color: blue">→附录←</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[</span></span><br><span class="line"><span class="string">      b(),</span></span><br><span class="line"><span class="string">      &#123; 'thinline--top': index &#125;</span></span><br><span class="line"><span class="string">    ]"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 通过 $props 将父组件的 props 一起传给子组件 - --&gt;</span><br><span class="line">    &lt;cell :<span class="class"><span class="keyword">class</span></span>=<span class="string">"b('title', &#123; expanded, disabled &#125;)"</span> v-bind=<span class="string">"$props"</span> @click=<span class="string">"onClick"</span>&gt;</span><br><span class="line">      &lt;slot slot=<span class="string">"icon"</span> name=<span class="string">"icon"</span> /&gt;</span><br><span class="line">      &lt;slot slot=<span class="string">"title"</span> name=<span class="string">"title"</span> /&gt;</span><br><span class="line">      &lt;slot slot=<span class="string">"value"</span> name=<span class="string">"value"</span> /&gt;</span><br><span class="line">      &lt;slot slot=<span class="string">"right-icon"</span> name=<span class="string">"right-icon"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/cell&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;div</span></span><br><span class="line"><span class="regexp">      v-if="inited"</span></span><br><span class="line"><span class="regexp">      v-show="show"</span></span><br><span class="line"><span class="regexp">      ref="wrapper"</span></span><br><span class="line"><span class="regexp">      :class="b('wrapper')"</span></span><br><span class="line"><span class="regexp">      @transitionend="onTransitionEnd"</span></span><br><span class="line"><span class="regexp">    &gt;</span></span><br><span class="line"><span class="regexp">      &lt;div ref="content" :class="b('content')"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;slot /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; raf, cancel &#125; <span class="keyword">from</span> <span class="string">'../utils/raf'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rafID = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> create(&#123;</span><br><span class="line">  name: <span class="string">'collapse-item'</span>,</span><br><span class="line"></span><br><span class="line">  props: &#123;</span><br><span class="line">    name: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    disabled: <span class="built_in">Boolean</span>,</span><br><span class="line">    icon: <span class="built_in">String</span>,</span><br><span class="line">    description: <span class="built_in">String</span>,</span><br><span class="line">    title: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    value: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    border: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    isLink: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  inject: [<span class="string">'Collapse'</span>],</span><br><span class="line"></span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      show: <span class="literal">null</span>,</span><br><span class="line">      inited: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  computed: &#123;</span><br><span class="line">    items () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.parent.items</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    index () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.items.indexOf(<span class="keyword">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    currentName () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.isDef(<span class="keyword">this</span>.name) ? <span class="keyword">this</span>.name : <span class="keyword">this</span>.index</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    expanded () &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.parent) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; value &#125; = <span class="keyword">this</span>.parent</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.parent.accordion</span><br><span class="line">        ? value === <span class="keyword">this</span>.currentName</span><br><span class="line">        : value.some(<span class="function"><span class="params">name</span> =&gt;</span> name === <span class="keyword">this</span>.currentName)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  watch: &#123;</span><br><span class="line">    expanded (expanded, prev) &#123;</span><br><span class="line">      <span class="keyword">if</span> (prev === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (expanded) &#123;</span><br><span class="line">        <span class="keyword">this</span>.show = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">this</span>.inited = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; content, wrapper &#125; = <span class="keyword">this</span>.$refs</span><br><span class="line">        <span class="keyword">if</span> (!content || !wrapper) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> contentHeight = content.clientHeight + <span class="string">'px'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理第一次高度展开或收起来时的动画</span></span><br><span class="line">        wrapper.style.height = expanded ? <span class="number">0</span> : contentHeight</span><br><span class="line">        rafID = raf(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          wrapper.style.height = expanded ? contentHeight : <span class="number">0</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.Collapse) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'CollapseItem needs to be child of Collapse'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.parent = <span class="keyword">this</span>.Collapse</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.items.push(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.show = <span class="keyword">this</span>.expanded</span><br><span class="line">    <span class="keyword">this</span>.inited = <span class="keyword">this</span>.expanded</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  destroyed () &#123;</span><br><span class="line">    cancel(rafID)</span><br><span class="line">    <span class="keyword">this</span>.items.splice(<span class="keyword">this</span>.index, <span class="number">1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    onClick () &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.disabled) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.parent.switch(<span class="keyword">this</span>.currentName, !<span class="keyword">this</span>.expanded)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onTransitionEnd () &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.expanded) &#123;</span><br><span class="line">        <span class="keyword">this</span>.show = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>分析代码：</p>
<ol>
<li>通过 inject 接收父组件的依赖，并在 <code>created</code> 生命周期中进行校验和初始化</li>
<li>子组件内容容器上同时运用 <code>v-if</code> 和 <code>v-show</code> 这样保证了，第一次时不做全部渲染，又保证了后续切换时，不需要进行频繁的重新生成dom</li>
<li>如果不显示设置 <code>name</code>， 默认值为当前组件在折叠列表中的索引值</li>
<li>通过 currentName 与 父组件的 value 值进行比较判断确定当前子项的展开状态</li>
<li>它点击改变子项的状态时，监听展开状态，并在里面对展开内容，进行第一帧的raf动画，其他帧是css动画</li>
<li>通过 <code>onTransitionEnd</code> 捕捉过渡结束状态，并同时改变 <code>show</code> 变量的状态</li>
</ol>
<p>样式代码如下：</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.collapse-item</span> &#123;</span><br><span class="line">  &amp;__title &#123;</span><br><span class="line">    <span class="selector-class">.cell__right-icon</span>::before &#123;</span><br><span class="line">      transition: .3s</span><br><span class="line">      <span class="attribute">transform</span>: rotate(<span class="number">90deg</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">      <span class="attribute">visibility</span>: hidden</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;--expanded &#123;</span><br><span class="line">      <span class="selector-class">.cell__right-icon</span>::before &#123;</span><br><span class="line">        <span class="attribute">transform</span>: rotate(-<span class="number">90deg</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &amp;::after &#123;</span><br><span class="line">        <span class="attribute">visibility</span>: visible</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;--disabled &#123;</span><br><span class="line">      &amp;,</span><br><span class="line">      &amp; <span class="selector-class">.cell__right-icon</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$gray</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &amp;:active &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#fff</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;__wrapper &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">    will-change: <span class="attribute">height</span></span><br><span class="line">    transition: height .3s ease-in-out</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;__content &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上述代码可知，针对 <code>height</code> 做过渡，实现平滑折叠效果</p>
<h4 id="DEMO展示"><a href="#DEMO展示" class="headerlink" title="DEMO展示"></a>DEMO展示</h4><p>点击下方链接查看 👇：<br><a href="http://wechat.hand-china.com/hippius-ui/#/zh-CN/collapse" target="_blank" rel="noopener">http://wechat.hand-china.com/hippius-ui/#/zh-CN/collapse</a></p>
<p><strong><em><a name="collapse">附录：</a></em></strong></p>
<ul>
<li>raf 源码分析见 <a href="/2019/03/01/util/#raf">raf</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
        <category>组件开发</category>
        <category>Collapse</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>超有价值文章收集 (链接)</title>
    <url>/2019/03/11/collection/</url>
    <content><![CDATA[<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><div class="note info"><ul>
<li><a href="https://www.jianshu.com/p/046f1b7e3b00" target="_blank" rel="noopener">CSS理解之z-index</a></li>
<li><a href="https://www.cnblogs.com/xiahj/p/8036419.html" target="_blank" rel="noopener">深入研究-webkit-overflow-scrolling:touch及ios滚动</a></li>
<li><a href="https://www.zhangxinxu.com/wordpress/2011/04/css-clip-rect/" target="_blank" rel="noopener">CSS clip:rect矩形剪裁功能及一些应用介绍</a></li>
<li><a href="https://blog.csdn.net/m0_37058714/article/details/80765562" target="_blank" rel="noopener">css弹性盒子——-桃园三兄弟之：flex-grow、flex-shrink、flex-basis详解</a></li>
</ul></div>
<h3 id="EVENT"><a href="#EVENT" class="headerlink" title="EVENT"></a>EVENT</h3><div class="note info"><ul>
<li><a href="https://segmentfault.com/a/1190000007913386?_ea=1507605" target="_blank" rel="noopener">移动Web滚动性能优化分析: Passive event listeners</a></li>
</ul></div>
<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><div class="note info"><ul>
<li><a href="https://www.cnblogs.com/xiaohuochai/p/5773183.html" target="_blank" rel="noopener">深入理解定时器系列第一篇——理解setTimeout和setInterval</a></li>
<li><a href="https://blog.csdn.net/qq_27397357/article/details/52839355" target="_blank" rel="noopener">终于清晰啦！offsetHeight、scrollHeight、clientHeight和offsetTop、scrollTop、clientTop</a></li>
</ul></div>
<h3 id="BABEL"><a href="#BABEL" class="headerlink" title="BABEL"></a>BABEL</h3><div class="note info"><ul>
<li><a href="https://www.jianshu.com/p/d078b5f3036a" target="_blank" rel="noopener">Babel 7.1介绍 transform-runtime polyfill env</a></li>
</ul></div>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>event</tag>
      </tags>
  </entry>
  <entry>
    <title>Grid 栅格组件</title>
    <url>/2018/11/13/grid/</url>
    <content><![CDATA[<blockquote><p>学然后知不足</p>
<footer><strong>戴圣</strong><cite><<礼记·学记>></礼记·学记></cite></footer></blockquote>
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><hr>
<div class="note info"><p><strong>本篇文章是基于网上开源的UI库 vant、antd、element 等做的关于一个栅格组件的分析</strong></p></div>
<h3 id="组件分析"><a href="#组件分析" class="headerlink" title="组件分析"></a>组件分析</h3><hr>
<ol>
<li>首先，需要创建的是一个布局组件，基本的结构如下图所示：</li>
</ol>
<p><img src="/images/layout.png" alt="basic-layout"></p>
<p>从上图可知，一个布局组件最少需要2个容器，一个父容器组件 <code>&lt;row&gt;</code>，多个子容器组件 <code>&lt;col&gt;</code>，当然，这个简单结构是不足以支持复杂场景的，我们继续往下走</p>
<ol start="2">
<li>现代浏览器常用的布局方式为 <code>flex布局</code>，但是为了考虑到兼容性问题，得有个兼容性版的基础布局</li>
</ol>
<h3 id="组件设计"><a href="#组件设计" class="headerlink" title="组件设计"></a>组件设计</h3><hr>
<p>为了考虑到实际情况，所以需要考虑，子容器 <code>列元素</code> 的占位 <code>span</code>、间距 <code>gutter</code>、 偏移 <code>offset</code> 问题， 且为了能更加细分和适应更多的场景，这里把 父容器 <code>行元素</code> 分为24栅栏，具体思路如下所示：</p>
<ol>
<li><p>考虑到组件的灵活性，把父子容器组件都设计为动态 <code>&lt;component&gt;</code> 组件，通过 <code>is</code> 属性指定具体标签</p>
</li>
<li><p>在父容器 <code>&lt;row&gt;</code> 上，设计 <code>type</code>，通过类型传递来选择开不开起 <code>flex</code> 布局</p>
</li>
<li><p>在父容器 <code>&lt;row&gt;</code> 上，传递 <code>gutter</code>，并在子容器 <code>&lt;col&gt;</code> 上，通过 <code>this.$parent</code> 对象，取到父容器上传递的 <code>gutter</code> 来设置列元素的间距，因为需要考虑到边界条件，容器2端的列元素应该没有padding，并且考虑到列元素应该被均匀拉伸，所以此时在父容器上通过 <code>gutter</code> 来计算并设置父容器的负边距，以此来处理这种情况，这也是为什么 <code>gutter</code> 传递到父容器而不是子容器的一个原因</p>
</li>
<li><p>在子容器 <code>&lt;col&gt;</code> 上，传递 <code>offset</code>，来设置列元素的偏移值，这里通过设置左外边距 <code>margin-left</code> 来实现，计算规则 (与计算 <code>span</code> 一样) 如下所示，这里采用的是stylus语法：</p>
</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attribute">margin-left</span>: <span class="string">"calc(%s * 100% / 24)"</span> % <span class="variable">$i</span> &#125;</span><br></pre></td></tr></table></figure>
<p>容器具体的属性设计总结如下所示：</p>
<h4 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td>布局方式，可选值为flex</td>
<td>-</td>
</tr>
<tr>
<td>gutter</td>
<td>列元素之间的间距（单位为px）</td>
<td>-</td>
</tr>
<tr>
<td>tag</td>
<td>自定义元素标签</td>
<td><code>div</code></td>
</tr>
<tr>
<td>justify</td>
<td>Flex 主轴对齐方式</td>
<td><code>start</code></td>
</tr>
<tr>
<td>align</td>
<td>Flex 交叉轴对齐方式</td>
<td><code>top</code></td>
</tr>
</tbody>
</table>
<h4 id="Col"><a href="#Col" class="headerlink" title="Col"></a>Col</h4><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>span</td>
<td>列元素宽度</td>
<td>-</td>
</tr>
<tr>
<td>offset</td>
<td>列元素偏移距离</td>
<td>-</td>
</tr>
<tr>
<td>tag</td>
<td>自定义元素标签</td>
<td><code>div</code></td>
</tr>
</tbody>
</table>
<h3 id="布局样式分析"><a href="#布局样式分析" class="headerlink" title="布局样式分析"></a>布局样式分析</h3><hr>
<p>完整代码，请<a href="#appendGrid" style="color: blue">→戳此处←</a></p>
<ol>
<li>为了方便使用循环，变量这些语法，采用stylus或其他预编译语言编写样式，<code>下面所有的css代码片段都采用stylus书写</code></li>
<li>为了考虑组件之后使用场景，需要良好的覆盖性和命名的独立性，这里采用<a href="https://en.bem.info/methodology/quick-start/" target="_blank" rel="noopener">BEM命名规范</a></li>
<li><p>为了创建兼容性版本的布局，这里子容器采用 <code>float</code> 布局，并设置盒模型为 <code>border-box</code> (内边距和边框在以设定的宽高内进行绘制)，更多<a href="https://www.cnblogs.com/svenjia/p/7701168.html" target="_blank" rel="noopener">盒模型</a>知识自行搜索，如下所示：</p>
<p><strong><em>{prefix}是stylus的插值语法，代表类名的前缀，表示设置了一个 prefix 变量，如：prefix = hips</em></strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.&#123;prefix&#125;-col &#123;</span><br><span class="line">  <span class="attribute">float</span>: left</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时为了处理高度塌陷和margin无效等问题，需要我们在父容器上通过伪元素上的设置来清除浮动，如下所示：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.&#123;prefix&#125;-row &#123;</span><br><span class="line">  &amp;::after &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span></span><br><span class="line">    <span class="attribute">display</span>: table</span><br><span class="line">    <span class="attribute">clear</span>: both</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在将 <code>type</code> 设为 <code>flex</code> 的时候，<strong><em>设为Flex布局以后，子元素的float、clear和vertical-align属性将失效</em></strong>，但还是需要将父容器上的伪元素清除如下所示：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.&#123;prefix&#125;-row &#123;</span><br><span class="line">  &amp;--<span class="attribute">flex</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex</span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">      <span class="attribute">display</span>: none</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>至于上面为什么要那么设计，这里有一篇分析<a href="https://www.jianshu.com/p/1978c7a3292d" target="_blank" rel="noopener">Bootstrap和flex</a>的文章，也是栅格布局概念精要，推荐阅读!!</p>
<p>这里是一个在线测试demo，做了<a href="https://codepen.io/shellWolf/pen/oVNaxq?editors=1100" target="_blank" rel="noopener">float布局-处理高度塌陷和margin无效</a>等问题的分析，有兴趣可以自己实际演练下。</p>
<p>✨ 这里是一个关于Grid组件的在线demo ，<a href="http://wechat.hand-china.com/hippius-ui/#/zh-CN/col" target="_blank" rel="noopener">请点击→</a></p>
<p><strong><em><a name="appendGrid">附录：</a></em></strong></p>
<ul>
<li>一个新属性介绍<a href="https://div.io/topic/1973" target="_blank" rel="noopener">display:flow-root</a>，本质上还是创建一个<a href="https://www.cnblogs.com/libin-1/p/7098468.html" target="_blank" rel="noopener">BFC</a></li>
<li>Row <a href="https://github.com/youzan/vant/blob/dev/packages/row" target="_blank" rel="noopener">源码</a></li>
<li>Col <a href="https://github.com/youzan/vant/blob/dev/packages/col" target="_blank" rel="noopener">源码</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
        <category>组件开发</category>
        <category>Grid</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>如何实现国际化（i18n）</title>
    <url>/2019/02/26/i18n/</url>
    <content><![CDATA[<blockquote><p>千里之行，始于足下</p>
<footer><strong>老子</strong><cite><<道德经>></道德经></cite></footer></blockquote>
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><hr>
<div class="note info"><p><strong>本篇文章的源代码基于开源组件库 vant</strong> </p></div>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><hr>
<p>在开始实现功能之前我们先来看下，通用的i18n库的使用流程，如下所示：</p>
<p><img src="/images/i18n.gif" alt="i18n使用流程图"></p>
<p>从上图可知，要想使用i18n得先导入这个包，然后使用<code>Vue.use</code>方法去install这个包，再进行初始化i18n实例，最后在<code>new Vue</code>的时候挂载到全局。</p>
<p>所以我们设计的时候需要提供一个 <code>install</code> 方法，用于初始化，也需要提供 <code>locale</code> 和 <code>messages</code> 去标记当前语言类型和具体的语言对应的内容，最后挂载到Vue的全局实例上。继续往下走 -↓</p>
<h3 id="设计实战"><a href="#设计实战" class="headerlink" title="设计实战"></a>设计实战</h3><hr>
<p>实现细节如下所示：</p>
<ol>
<li>定义一个 <code>install</code> 方法，用于初始化。在这个方法中我们创建2个挂载在Vue原型上的响应式对象，如下所示：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> defaultMessages <span class="keyword">from</span> <span class="string">'./lang/zh-CN'</span> <span class="comment">// 对应的默认语言包</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proto = Vue.prototype</span><br><span class="line"><span class="keyword">const</span> defaultLang = <span class="string">'zh-CN'</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  Vue.util.defineReactive(proto, <span class="string">'$prefixLang'</span>, defaultLang)</span><br><span class="line">  Vue.util.defineReactive(proto, <span class="string">'$prefixMessages'</span>, &#123;</span><br><span class="line">    [defaultLang]: defaultMessages,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上可知，定义了2个私有属性 <code>$prefixLang</code> (<strong><em>对应locale</em></strong>) 和 <code>$prefixMessages</code> (<strong><em>对应messages</em></strong>) (注意为变量名带上自定义的 <code>prefix</code>) 在Vue的原型上，这样就达到了挂载到全局的目的，但是为了能够使之变为可响应式的对象，还需要利用 <code>Vue.util.defineReactive</code> 方法（这个方法没有在官网上暴露，需要通过分析源码时获知，更具体的解释见<a href="#appendI18n" style="color: blue">→附录←</a>）</p>
<ol start="2">
<li>定义一个 <code>use</code> 方法进行语言的切换。如下所示：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> deepAssign <span class="keyword">from</span> <span class="string">'../utils/deep-assign'</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proto = Vue.prototype</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">use</span> (<span class="params">lang, messages</span>) </span>&#123;</span><br><span class="line">  proto.$prefixLang = lang</span><br><span class="line">  add(&#123;</span><br><span class="line">    [lang]: messages,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">messages = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将 messages 所有可枚举属性复制到 $prefixMessages 属性上</span></span><br><span class="line">  deepAssign(proto.$prefixMessages, messages)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上可以，我们可以通过 <code>use</code> 方法并配合 <code>deepAssign</code> 方法 来进行当前语言和对应的内容的切换, <code>deepAssign</code> 的实现细节见 <a href="#appendI18n" style="color: blue">→附录←</a></p>
<ol start="3">
<li>为了能够在Vue组件模板中使用，同样需要创建一个 <code>$t</code> 函数，如下所示：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span> (<span class="params">object, path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> keys = path.split(<span class="string">'.'</span>)</span><br><span class="line">  <span class="keyword">let</span> result = object</span><br><span class="line"></span><br><span class="line">  keys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    result = isDef(result[key]) ? result[key] : <span class="string">''</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> camelizeRE = <span class="regexp">/-(\w)/g</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(camelizeRE, (_, c) =&gt; c.toUpperCase())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// component mixin</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    $t () &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; name &#125; = <span class="keyword">this</span>.$options <span class="comment">// 用于获取当前 Vue 实例的初始化选项</span></span><br><span class="line">      <span class="keyword">const</span> prefix = name ? camelize(name) + <span class="string">'.'</span> : <span class="string">''</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !<span class="keyword">this</span>.$prefixMessages) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">'[XXX] Locale not correctly registered.'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> messages = <span class="keyword">this</span>.$prefixMessages[<span class="keyword">this</span>.$prefixLang]</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">path, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> message = <span class="keyword">get</span>(messages, prefix + path) || <span class="keyword">get</span>(messages, path)</span><br><span class="line">        return typeof message === 'function' ? message.apply(null, args) : message</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上可知，创建了一个可混入的 <code>$t</code> computed 属性， 然后在对应的Vue文件上使用 <code>mixins</code> 的方式混入（<a href="https://github.com/youzan/vant/blob/dev/packages/utils/use/i18n.ts" target="_blank" rel="noopener">更多源码</a>），这样我们就能在Vue组件模板上使用 <code>$t</code> 函数来做国际化了，如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; $t('key') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>至此，如何实现国际化已经全部分析完毕。</p>
<p><strong><em><a name="appendI18n">附录：</a></em></strong></p>
<ul>
<li>Vue.util 源码定义见 <a href="https://github.com/vuejs/vue/blob/dev/dist/vue.js#L5355" target="_blank" rel="noopener">Vue.util</a></li>
<li>defineReactive 源码分析见 <a href="https://ustbhuangyi.github.io/vue-analysis/reactive/reactive-object.html#definereactive" target="_blank" rel="noopener">Vue.util.defineReactive</a></li>
<li>deepAssign 源码分析见 <a href="/2019/03/01/util/#deepAssign">deepAssign</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
        <category>国际化</category>
      </categories>
      <tags>
        <tag>Mixin</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义图标字体</title>
    <url>/2019/03/03/icon/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本篇文章将介绍如何和UI设计师配合，制定自定义的图标字体，最终生成自定义的ttf文件和样式。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>大致流程如下图所示：</p>
<p><img src="/images/icon-ttf.gif" alt="icon-ttf"></p>
<p>下面就针对它做具体的分析：</p>
<ol>
<li>首先需要在电脑中安装 <code>sketch</code> 软件，因为我们要用到该软件的 <code>sketchtool</code> (<a href="https://developer.sketchapp.com/guides/sketchtool/" target="_blank" rel="noopener">一个内置工具</a>)命令，将 <code>.sketch</code> 源文件处理为<code>svg</code>文件，如下所示：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">shell.exec(<span class="string">`/Applications/Sketch.app/Contents/Resources/sketchtool/bin/sketchtool export slices --formats=svg --overwriting=YES --save-for-web=YES <span class="subst">$&#123;sketch&#125;</span> --output=<span class="subst">$&#123;svgDir&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>我们需要创建一个icon文件夹，用于处理sketch文件，目录结构如下所示：<br><img src="/images/icon.jpg" alt="icon index"></li>
</ol>
<p>从上图可知，最终我们会生成一个带 md5 标记的ttf文件(通过 <code>[gulp-iconfont](https://www.npmjs.com/package/gulp-iconfont)</code> 模块)和对应的样式文件index.styl (通过 <code>[gulp-iconfont-css](https://www.npmjs.com/package/gulp-iconfont-css)</code> 模块)，这2个模块的更多解释请查看各自的npm包介绍</p>
<p><code>template.css</code> 文件相识代码见： <a href="https://github.com/youzan/vant-icons/blob/master/build/template.tpl" target="_blank" rel="noopener">https://github.com/youzan/vant-icons/blob/master/build/template.tpl</a></p>
<p><code>template-local.js</code> 文件代码如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">fontName, ttf</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`@font-face &#123;</span></span><br><span class="line"><span class="string">  font-style: normal;</span></span><br><span class="line"><span class="string">  font-weight: normal;</span></span><br><span class="line"><span class="string">  font-family: '<span class="subst">$&#123;fontName&#125;</span>';</span></span><br><span class="line"><span class="string">  src: url('./<span class="subst">$&#123;ttf&#125;</span>') format('truetype');</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>下面是config文件下 <code>index.js</code>文件内容，可以自定义图标的样式名，通过以下格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    name: <span class="string">'xxx-icon'</span>,</span><br><span class="line">    glyphs: [&#123;</span><br><span class="line">        src: <span class="string">'search.svg'</span>,</span><br><span class="line">        css: <span class="string">'search'</span></span><br><span class="line">    &#125;, ...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体的 gulp 脚本代码如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * build iconfont from sketch</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs-extra'</span>)</span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'fast-glob'</span>)</span><br><span class="line"><span class="keyword">const</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>)</span><br><span class="line"><span class="keyword">const</span> md5File = <span class="built_in">require</span>(<span class="string">'md5-file'</span>)</span><br><span class="line"><span class="keyword">const</span> iconfont = <span class="built_in">require</span>(<span class="string">'gulp-iconfont'</span>) <span class="comment">// core module</span></span><br><span class="line"><span class="keyword">const</span> iconfontCss = <span class="built_in">require</span>(<span class="string">'gulp-iconfont-css'</span>) <span class="comment">// core module</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../packages/icon/config'</span>)</span><br><span class="line"><span class="keyword">const</span> local = <span class="built_in">require</span>(<span class="string">'../packages/icon/config/template-local'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iconDir = path.join(__dirname, <span class="string">'../packages/icon'</span>)</span><br><span class="line"><span class="keyword">const</span> svgDir = path.join(iconDir, <span class="string">'svg'</span>)</span><br><span class="line"><span class="keyword">const</span> sketch = path.join(iconDir, <span class="string">'assets/icons.sketch'</span>)</span><br><span class="line"><span class="keyword">const</span> template = path.join(iconDir, <span class="string">'config/template.css'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// get md5 from sketch</span></span><br><span class="line"><span class="keyword">const</span> md5 = md5File</span><br><span class="line">  .sync(sketch)</span><br><span class="line">  .slice(<span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line"><span class="keyword">const</span> ttf = <span class="string">`<span class="subst">$&#123;config.name&#125;</span>-<span class="subst">$&#123;md5&#125;</span>.ttf`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// extract svg from sketch should install sketchtool first install guide:</span></span><br><span class="line"><span class="comment">// https://developer.sketchapp.com/guides/sketchtool/</span></span><br><span class="line">shell.exec(<span class="string">`/Applications/Sketch.app/Contents/Resources/sketchtool/bin/sketchtool export slices --formats=svg --overwriting=YES --save-for-web=YES <span class="subst">$&#123;sketch&#125;</span> --output=<span class="subst">$&#123;svgDir&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove previous ttf</span></span><br><span class="line"><span class="keyword">const</span> prevTTFs = glob.sync(path.join(iconDir, <span class="string">'*.ttf'</span>))</span><br><span class="line">prevTTFs.forEach(<span class="function"><span class="params">ttf</span> =&gt;</span> fs.removeSync(ttf))</span><br><span class="line"></span><br><span class="line"><span class="comment">// rename svg</span></span><br><span class="line">config</span><br><span class="line">  .glyphs</span><br><span class="line">  .forEach(<span class="function">(<span class="params">icon, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> src = path.join(svgDir, icon.src)</span><br><span class="line">    <span class="keyword">if</span> (fs.existsSync(src)) &#123;</span><br><span class="line">      fs.renameSync(src, path.join(svgDir, icon.css + <span class="string">'.svg'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// generate ttf from sketch &amp;&amp; build icon.styl</span></span><br><span class="line">gulp.task(<span class="string">'ttf'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src([<span class="string">`<span class="subst">$&#123;svgDir&#125;</span>/*.svg`</span>])</span><br><span class="line">    .pipe(iconfontCss(&#123;</span><br><span class="line">      fontName: config.name,</span><br><span class="line">      path: template,</span><br><span class="line">      targetPath: <span class="string">'../icon/index.styl'</span>,</span><br><span class="line">      normalize: <span class="literal">true</span>,</span><br><span class="line">      firstGlyph: <span class="number">0xf000</span>,</span><br><span class="line">      cssClass: ttf, <span class="comment">// this is a trick to pass ttf to template</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(iconfont(&#123;</span><br><span class="line">      fontName: ttf.replace(<span class="string">'.ttf'</span>, <span class="string">''</span>),</span><br><span class="line">      formats: [<span class="string">'ttf'</span>],</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(iconDir))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'ttf'</span>], () =&gt; &#123;</span><br><span class="line">  <span class="comment">// generate local.styl</span></span><br><span class="line">  fs.writeFileSync(path.join(iconDir, <span class="string">'local.styl'</span>), local(config.name, ttf))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove svg</span></span><br><span class="line">  fs.removeSync(svgDir)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// upload ttf to cdn /no cdn shell.exec(`superman cdn /xxx $&#123;path.join(iconDir,</span></span><br><span class="line">  <span class="comment">// ttf)&#125;`)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong><em> ✨下面是完整的自定义图标字体解决方案的项目地址：<a href="https://github.com/youzan/vant-icons" target="_blank" rel="noopener">https://github.com/youzan/vant-icons</a></em></strong></p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
        <category>Icon</category>
      </categories>
      <tags>
        <tag>icon</tag>
        <tag>ttf</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>对于Rotate的图形解释</title>
    <url>/2019/03/12/rotate/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>开始本文之前，需要先对CSS的3d坐标轴有一定的概念，如下图所示：</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1552369974256&amp;di=1735bcc1a7fc3a053fe1e3cc8e6facda&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.787866.com%2Fupload%2F2012-08-31%2F2012-08-31-426a7984c0-f7de-4725-84bb-bf5d96477aa7.jpg" alt="3D坐标轴"></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="RotateZ"><a href="#RotateZ" class="headerlink" title="RotateZ"></a>RotateZ</h4><p><img src="/images/rotate.png" alt="rotateZ"></p>
<p>从上图可知，rotateZ旋转就是普通的rotate 2d 旋转，我们可以把一个图形压缩为一条线(图中蓝色虚线)，然后按给定角度就行旋转，红色虚线和蓝色虚线的夹角就是旋转的角度</p>
<blockquote>
<p>注意：rotate 采取就近转到目标的原则</p>
<ul>
<li>小于180°，正常顺时针，但大于180°逆时针旋转</li>
<li>设180°会逆时针转，-180°才顺时针</li>
<li>设为360°的倍数值不会转</li>
</ul>
</blockquote>
<h4 id="RotateX"><a href="#RotateX" class="headerlink" title="RotateX"></a>RotateX</h4><p><img src="/images/rotate1.png" alt="rotateX"></p>
<p>从上图可知，当绕X轴旋转时，图形的X边长不会变化，只有Y值发生改变，公式为： <code>cos deg * Y = Y&#39;</code>，意思就是，当前选择角度的cos值乘以原先Y边的值等于旋转后新边的值</p>
<h4 id="RotateY"><a href="#RotateY" class="headerlink" title="RotateY"></a>RotateY</h4><p><img src="/images/rotate3.png" alt="rotateY"></p>
<p>从上图可知，当绕Y轴旋转时，图形的Y边长不会变化，只有X值发生改变，公式为： <code>cos deg * X = X&#39;</code>，意思就是，当前选择角度的cos值乘以原先X边的值等于旋转后新边的值</p>
<blockquote>
<p>Tips:<br>我们可以通过与 <code>perspective</code> 透视属性 和 <code>transform-style:preserve-3d</code> 属性配合，观察图形的3D变化</p>
</blockquote>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>rotate</tag>
      </tags>
  </entry>
  <entry>
    <title>Spin 旋转提示组件</title>
    <url>/2019/03/07/spin/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>要实现一个spin效果，这里有2种实现实现方式：</p>
<ol>
<li><p>往 <code>img</code> 或 <code>embed</code> 标签中，传入svg文件（loading效果的svg）地址到 <code>src</code> 特性中，就可以了</p>
<p>如下所示旋转效果（更多资源，查看附录）：</p>
</li>
</ol>
<p style="display: inline-flex">&nbsp; &nbsp; &nbsp; &nbsp;<img src="https://loading.io/spinners/message/index.messenger-typing-preloader.svg" alt width="80" height="80">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img src="https://loading.io/spinners/stripe/index.svg" alt width="80" height="80">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img src="https://loading.io/spinners/camera/index.svg" alt width="80" height="80">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img src="https://loading.io/spinners/microsoft/index.svg" alt width="80" height="80">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img src="https://loading.io/spinners/square/index.svg" alt width="77" height="77">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p>

<ol start="2">
<li>利用纯CSS3来绘制旋转效果 （下面将重点分析其绘制过程）， 如下图所示：</li>
</ol>
<p><img src="/images/loading.png" alt="spin"></p>
<blockquote>
<p><strong><em>DEMO效果展示，请点击 <a href="http://wechat.hand-china.com/hippius-ui/#/zh-CN/spin" target="_blank" rel="noopener">这里</a> 查看</em></strong></p>
</blockquote>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>代码如下所示：</p>
<h4 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">"!!svgSrc"</span> <span class="attr">:src</span>=<span class="string">"svgSrc"</span> <span class="attr">:style</span>=<span class="string">"svgStyle"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span> <span class="attr">:class</span>=<span class="string">"b()"</span> <span class="attr">:style</span>=<span class="string">"sizeStyle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-for</span>=<span class="string">"i in 12"</span> <span class="attr">:class</span>=<span class="string">"b('item')"</span> <span class="attr">:style</span>=<span class="string">"colorStyle"</span> <span class="attr">:key</span>=<span class="string">"i"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>从上可知，模板代码非常简单，就是循环出了12个元素在一个容器中，构成 <code>Spin</code> 组件的主体，重要的是样式的编写，我们继续往下走👇</p>
<h4 id="CSS代码-采用stylus语法"><a href="#CSS代码-采用stylus语法" class="headerlink" title="CSS代码 (采用stylus语法)"></a>CSS代码 (采用stylus语法)</h4><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">@keyframes spin-fade &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    opacity: .85</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    opacity: .25</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    opacity: .25</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spin</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative</span><br><span class="line">  <span class="attribute">display</span>: inline-block</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span></span><br><span class="line">  &amp;__item &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute</span><br><span class="line">    <span class="attribute">left</span>: calc(<span class="number">50%</span> - <span class="number">1px</span>)</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">37.5%</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2px</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25%</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span> / <span class="number">20%</span></span><br><span class="line">    opacity: .25</span><br><span class="line">    <span class="attribute">background-color</span>: currentColor</span><br><span class="line">    <span class="attribute">animation</span>: spin-fade <span class="number">1s</span> linear infinite</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">12</span>) &#123;</span><br><span class="line">      &amp;:nth-child(&#123;num&#125;) &#123;</span><br><span class="line">        <span class="attribute">animation-delay</span>: ((num - <span class="number">1</span>) / <span class="number">12</span>) s</span><br><span class="line">        <span class="attribute">transform</span>: rotate(<span class="number">30deg</span> * (num - <span class="number">6</span>)) translateY(-<span class="number">150%</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>针对上述样式的解释：</p>
<ol>
<li>创建一个行内块的父容器盒子，设置为相对定位</li>
<li>创建12个绝对定位的子元素，并设置其透明度为 .25 为后面动画打铺垫</li>
<li>给每个子元素的四个角设置水平半径为50%，垂直半径为20%的圆角</li>
<li>给每个子元素设置固定宽度2px，高度相对父容器自适应（占父容器的25%）</li>
<li>通过 <code>top: 37.5%; left: calc(50% - 1px)</code> 设置初始子元素为垂直居中的</li>
<li>通过 <code>transform: rotate(30deg * (num - 6)) translateY(-150%)</code> 让第一个子元素旋转-150deg 改变正反向，然后向正方向移动（即向下（因为改变了正方向））1.5（37.5 / 25 = 1.5）个子元素高度的距离，确定第一个元素的初始位置，其它11个子元素按同样的规则进行排布，最后形成一个圆形排布</li>
<li>最后给子元素设置动画，控制子元素的透明度，以 1/12 s 为间隔控制透明度的变化，形成视觉上的转动（其实只是子元素透明度的变化）</li>
</ol>
<p>下面几张图分解关键步骤解释：</p>
<p><img src="/images/spin.png" alt="spin"><br><img src="/images/spin1.png" alt="spin1"><br><img src="/images/spin2.png" alt="spin2"></p>
<p><strong><em>附录 ✨</em></strong></p>
<ul>
<li><a href="/2019/03/01/bem/">b函数</a>分析</li>
<li><a href="https://loading.io/" target="_blank" rel="noopener">loading svg 资源地址</a></li>
<li><a href="/2019/03/08/border-radius/">对border-radius的解释</a></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
        <category>组件开发</category>
        <category>Spin</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>组件</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用CSS手绘一个5角星？</title>
    <url>/2019/03/12/star/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前2天和同事聊天的时候，被问到如何利用CSS手绘一个 5角星 图形，简单思考了下，想出了个比较简易的办法，详细分析见下文</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们先来观察下5角星，发现它有以下几个特征：</p>
<ol>
<li>有5个角，对应5个三角形</li>
<li>每个三角形都是等边三角形</li>
<li>每个三角形之间间隔同样的角度，并按圆形排列</li>
</ol>
<p>结合上述特征，就可以把问题进行切割，分解成下面几步：</p>
<ol>
<li>创建5个一样的等边三角形</li>
<li>把每个三角形按（360°/5 = 72°）进行间隔排列</li>
<li>给最后的中心空白区域位置填色</li>
</ol>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="创建三角形"><a href="#创建三角形" class="headerlink" title="创建三角形"></a>创建三角形</h4><p>我们利用 border 法画三角形，进行三角形绘制之前，得先搞懂一个图，如下所示：</p>
<p><a href="/images/border.png">border</a></p>
<p>分析上图，蓝色三角形（bottom）其实从它的顶点垂直下来一条线为准，将蓝色三角形分为左右两个小三角形，左边小三角形底边受left值影响，右边小三角形底边受right值影响，其它三角形也一样。</p>
<p>根据上述规则， 我们可以很方便得到一个角度为60°的等边三角形：</p>
<ol>
<li>指定bottom border的宽度，举例我们设为100px</li>
<li>由于要创建一个 角度为指定角度（60°）的等边三角形，我们把三角形对分，成为2个直角三角形，这样，我们就有了一个指定为 30°的角和一个给定的bottom 值，通过勾股定理公式: <code>tan30°= X/(bottom值)</code>，很容易得到X的值，这样我们就确定了 left 和 right 的值为 √3/3*100px ≈ 58px</li>
</ol>
<p>具体的代码如下所示：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">58px</span>);</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">58px</span>);</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">58px</span> <span class="number">100px</span> <span class="number">58px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: red transparent currentcolor transparent;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="按圆形排列三角形"><a href="#按圆形排列三角形" class="headerlink" title="按圆形排列三角形"></a>按圆形排列三角形</h4><p>上面我们得到了我们想要的三角形，接下来我们就把他们按72°间隔进行排列，具体代码如下所示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">72deg</span>)  <span class="built_in">translateY</span>(-<span class="number">120%</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div2</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">144deg</span>)  <span class="built_in">translateY</span>(-<span class="number">120%</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div3</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>:  <span class="built_in">rotate</span>(<span class="number">216deg</span>) <span class="built_in">translateY</span>(-<span class="number">120%</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div4</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">288deg</span>) <span class="built_in">translateY</span>(-<span class="number">120%</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div5</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>) <span class="built_in">translateY</span>(-<span class="number">120%</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="填充图形中间位置颜色"><a href="#填充图形中间位置颜色" class="headerlink" title="填充图形中间位置颜色"></a>填充图形中间位置颜色</h4><p>多个三角形围城一圈会组成，一个空白的区域，我们需要把它填充为与边框同样的颜色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#fill</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">166px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">158px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">83px</span>);</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">79px</span>);</span><br><span class="line">  <span class="attribute">background</span>: currentcolor;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意： border 和 填充体的颜色都取 currentcolor</p>
</blockquote>
<h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><p>DEMO链接地址（可在线测试）: <a href="https://codepen.io/shellWolf/pen/YgxOVm" target="_blank" rel="noopener">https://codepen.io/shellWolf/pen/YgxOVm</a></p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>增强自己的分解意识，还有更好的方法等待去探索。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>border</tag>
        <tag>三角形</tag>
        <tag>星星</tag>
      </tags>
  </entry>
  <entry>
    <title>Switch 开关组件</title>
    <url>/2019/03/13/switch/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>switch</code> 组件是一个很常用的基础组件，如下图所示：</p>
<p><img src="/images/switch.png" alt="switch"></p>
<p>下面我们来一起开发一个自定义的 <code>switch</code> 组件吧</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>因为 <code>switch</code> 组件是一个开关组件，它的可操作状态就和 checkbox 一样，所以，我们可以基于 <code>&lt;input type=&quot;checkbox&quot;&gt;</code> 标签为基础，对它进行改造封装</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="组件逻辑代码"><a href="#组件逻辑代码" class="headerlink" title="组件逻辑代码"></a>组件逻辑代码</h4><p>我们可以在 <code>switch</code> 组件上创建双向数据绑定， 当用户触发 <code>input</code> 元素的输入事件时，自动更新到 <code>switch</code> 的数据</p>
<blockquote>
<p>注意：内部的 <code>input</code> 元素的数据也是双向绑定</p>
</blockquote>
<p>大致操作流程如下所示：</p>
<ol>
<li>在 computed 的 get 中 给 <code>currentValue</code> 赋初值</li>
<li>当用户触发 input 的 <code>chang</code> 事件时，input 元素自动更新数据，也就是下文的 <code>currentValue</code> 变量， 同时发送一个自定义的 <code>change</code> 事件，停供给外界使用</li>
<li>当 <code>currentValue</code> 发生变化时，会触发它 <code>setter</code> 方法，我们在 computed 的 set 中 发射默认的 <code>input</code> 事件</li>
<li>在父组件中 用 v-model 自动接收上一步 发射事件的值，更新 <code>switch</code> 组件选择状态</li>
</ol>
<p>具体代码如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    :<span class="class"><span class="keyword">class</span></span>=<span class="string">"b()"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      :<span class="class"><span class="keyword">class</span></span>=<span class="string">"b('input', &#123; disabled &#125;)"</span></span><br><span class="line">      :disabled=<span class="string">"disabled"</span></span><br><span class="line">      v-model=<span class="string">"currentValue"</span></span><br><span class="line">      type=<span class="string">"checkbox"</span></span><br><span class="line">      @change=<span class="string">"onChange"</span></span><br><span class="line">    &gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'switch'</span>,</span><br><span class="line"></span><br><span class="line">  props: &#123;</span><br><span class="line">    value: <span class="built_in">Boolean</span>,</span><br><span class="line">    disabled: <span class="built_in">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  computed: &#123;</span><br><span class="line">    currentValue: &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="keyword">set</span> (val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, val)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    onChange () &#123;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, <span class="keyword">this</span>.currentValue)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="组件样式代码"><a href="#组件样式代码" class="headerlink" title="组件样式代码"></a>组件样式代码</h4><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">.switch</span><br><span class="line">  <span class="attribute">position</span>: relative</span><br><span class="line">  <span class="attribute">display</span>: inline-flex</span><br><span class="line">  <span class="attribute">align-items</span>: center</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span></span><br><span class="line"></span><br><span class="line">  &amp;__input</span><br><span class="line">    <span class="attribute">display</span>: inline-block</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box</span><br><span class="line">    appearance: <span class="attribute">none</span></span><br><span class="line">    -webkit-appearance: <span class="attribute">none</span></span><br><span class="line">    <span class="attribute">outline</span>: none</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">52px</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32px</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">32px</span></span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">0.1s</span>, border <span class="number">0.1s</span></span><br><span class="line">    &amp;--disabled</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">0.4</span></span><br><span class="line">      <span class="attribute">pointer-events</span>: none</span><br><span class="line"></span><br><span class="line">    &amp;::before,</span><br><span class="line">    &amp;::after</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span></span><br><span class="line">      <span class="attribute">position</span>: absolute</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">16px</span></span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0px</span></span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0px</span></span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">0px</span></span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0px</span></span><br><span class="line">      transition: transform .4s cubic-bezier(0.4, 0.4, 0.25, 1.35)</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#eee</span></span><br><span class="line"></span><br><span class="line">    &amp;::after</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">30px</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">30px</span></span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">15px</span></span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#fff</span></span><br><span class="line">      box-shadow: 0 1px 3px rgba(0, 0, 0, .3)</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">1px</span></span><br><span class="line"></span><br><span class="line">    &amp;:checked</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#1f8ceb</span></span><br><span class="line">      &amp;::before</span><br><span class="line">        <span class="attribute">transform</span>: scale(<span class="number">0</span>)</span><br><span class="line">      &amp;::after</span><br><span class="line">        <span class="attribute">transform</span>: translateX(<span class="number">100%</span>  - <span class="number">30px</span>)</span><br></pre></td></tr></table></figure>
<p>上述代码有以下几点需要注意的地方：</p>
<p>1: 设置 <code>-webkit-appearance: none</code> 去除 input 的原始外观<br>2: 通过 before 和 after 伪元素 构造 switch的动画元素<br>3: 通过 <code>input:checked</code> 选择器控制当选中时， before 和 after 的变化，配合 <code>transition</code>形成点击的动画效果</p>
<h4 id="DEMO展示"><a href="#DEMO展示" class="headerlink" title="DEMO展示"></a>DEMO展示</h4><p>点击下方链接查看 👇：<br><a href="http://wechat.hand-china.com/hippius-ui/#/zh-CN/switch" target="_blank" rel="noopener">http://wechat.hand-china.com/hippius-ui/#/zh-CN/switch</a></p>
]]></content>
      <categories>
        <category>Vue</category>
        <category>组件开发</category>
        <category>Switch</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>Tabbar 标签栏组件</title>
    <url>/2019/03/14/tabbar/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>标签栏组件是什么样子的呢？ 看下图：</p>
<p><img src="/images/tabbar.png" alt="tabbar"></p>
<p>下面我将分析如何实现效果</p>
<blockquote>
<p>本文将不会给出具体的代码实现，但是会绘画出设计流程</p>
</blockquote>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><ol>
<li>首先我们来说说布局，父组件其实只是一个容器组件，我们对它进行flex布局，并用 flex = 1 根据子元素个数等分其宽度</li>
<li>子组件内部有2个元素，一个图标，对应图标下方的文字（附加功能右上角徽章，这个不做分析），同样也采用flex布局，然后做居中处理，不过元素排列方向通过 <code>flex-flow: column</code> 改变为竖排，这样大致布局也就基本完成了</li>
</ol>
<h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><p>逻辑代码分析见下图：</p>
<p><img src="/images/tabbar-logic.png" alt="tabbar-logic"></p>
<h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><p>点击下面👇链接展示：</p>
<p><a href="http://wechat.hand-china.com/hippius-ui/#/zh-CN/tab-bar" target="_blank" rel="noopener">http://wechat.hand-china.com/hippius-ui/#/zh-CN/tab-bar</a></p>
]]></content>
      <categories>
        <category>Vue</category>
        <category>组件分析</category>
        <category>Tabbar</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>组件</tag>
      </tags>
  </entry>
  <entry>
    <title>通用方法收集</title>
    <url>/2019/03/01/util/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="note info"><p>以下源代码大部分收集于各个开源库和公开代码</p></div>
<hr>
<h4 id="常用辅助类函数"><a href="#常用辅助类函数" class="headerlink" title="# 常用辅助类函数"></a><a name="auxiliary" href="#auxiliary" style="border: none"><span style="color: #1ca5f2">#</span> 常用辅助类函数</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDef</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value !== <span class="literal">undefined</span> &amp;&amp; value !== <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObj</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">typeof</span> x</span><br><span class="line">  <span class="keyword">return</span> x !== <span class="literal">null</span> &amp;&amp; (type === <span class="string">'object'</span> || type === <span class="string">'function'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(val) === <span class="string">'[object Array]'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将keba-case(短横线)的变量名转换为camelCase(驼峰式)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/-(\w)/g</span>, (_, c) =&gt; c.toUpperCase())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范围限制 ,确保当前值在最大值和最小值之间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">range</span> (<span class="params">num, min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.min(<span class="built_in">Math</span>.max(num, min), max)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">value: string</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^((([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`&#123;\|&#125;~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`&#123;\|&#125;~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i</span>;</span><br><span class="line">  <span class="keyword">return</span> reg.test(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobile</span>(<span class="params">value: string</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  value = value.replace(<span class="regexp">/[^-|\d]/g</span>, <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^((\+86)|(86))?(1)\d&#123;10&#125;$/</span>.test(value) || <span class="regexp">/^0[0-9-]&#123;10,13&#125;$/</span>.test(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">value: string</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^\d+$/</span>.test(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is image source</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isSrc</span>(<span class="params">url: string</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^(https?:)?\/\/|data:image/</span>.test(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="deepAssign"><a href="#deepAssign" class="headerlink" title="# deepAssign"></a><a name="deepAssign" href="#deepAssign" style="border: none"><span style="color: #1ca5f2">#</span> deepAssign</a></h4><p>将所有可枚举属性的值从源对象复制到目标对象，返回目标对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; hasOwnProperty &#125; = <span class="built_in">Object</span>.prototype</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignKey</span> (<span class="params">to, from, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> val = <span class="keyword">from</span>[key]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.如果源对象的某个key对应的value是未定义的，直接返回</span></span><br><span class="line">  <span class="comment">// 2.如果源对象的某个key对应的value不是未定义的，但是目标对象对应的key的value未定义 直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (!isDef(val) || (hasOwnProperty.call(to, key) &amp;&amp; !isDef(to[key]))) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!hasOwnProperty.call(to, key) || !isObj(val)) &#123;</span><br><span class="line">    to[key] = val</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    to[key] = assign(<span class="built_in">Object</span>(to[key]), <span class="keyword">from</span>[key])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">assign</span> (<span class="params">to, from</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasOwnProperty.call(<span class="keyword">from</span>, key)) &#123;</span><br><span class="line">      assignKey(to, <span class="keyword">from</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> to</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意1✨: 该方法会跳过那些值为 null 或 undefined 的源对象和目标对象；该方法对于目标对象中没有的key会直接复制源对象对应的key和value，不会发生深拷贝</p>
</blockquote>
<blockquote>
<p>注意2✨: 当Object以非构造函数形式被调用时，Object() 等同于 new Object()，主要用于处理给定值是 null 和 undefined·时, 创建并返回一个空对象，否则，将返回一个与给定值对应类型的对象</p>
</blockquote>
<p><strong><em><a href="https://github.com/youzan/vant/blob/dev/packages/utils/deep-assign.ts" target="_blank" rel="noopener">点击查看最新源码</a></em></strong></p>
<h4 id="raf"><a href="#raf" class="headerlink" title="# raf"></a><a name="raf" href="#raf" style="border: none"><span style="color: #1ca5f2">#</span> raf</a></h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">requestAnimationFrame官方介绍</a><br>下面是 requestAnimationFrame的 polyfill</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> prev = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fallback</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> curr = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="number">16</span> - (curr - prev))</span><br><span class="line">  <span class="keyword">const</span> id = setTimeout(fn, ms)</span><br><span class="line">  prev = curr + ms</span><br><span class="line">  <span class="keyword">return</span> id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"><span class="keyword">const</span> root = Vue.prototype.$isServer ? global : <span class="built_in">window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"><span class="keyword">const</span> iRaf = root.requestAnimationFrame || root.webkitRequestAnimationFrame || fallback</span><br><span class="line"></span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"><span class="keyword">const</span> iCancel = root.cancelAnimationFrame || root.webkitCancelAnimationFrame || root.clearTimeout</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">raf</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> iRaf.call(root, fn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cancel</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  iCancel.call(root, id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em><a href="https://github.com/youzan/vant/blob/dev/packages/utils/raf.ts" target="_blank" rel="noopener">点击查看最新源码</a></em></strong></p>
<h4 id="scroll"><a href="#scroll" class="headerlink" title="# scroll"></a><a name="scroll" href="#scroll" style="border: none"><span style="color: #1ca5f2">#</span> scroll</a></h4><p>获取html元素对应的一些位置信息的封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// get nearest scroll element</span></span><br><span class="line">  getScrollEventTarget (element, rootParent = <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = element</span><br><span class="line">    <span class="comment">// bugfix, see http://w3help.org/zh-cn/causes/SD9013 and http://stackoverflow.com/questions/17016740/onscroll-function-is-not-working-for-chrome</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode &amp;&amp; currentNode.tagName !== <span class="string">'HTML'</span> &amp;&amp; currentNode.tagName !== <span class="string">'BODY'</span> &amp;&amp; currentNode.nodeType === <span class="number">1</span> &amp;&amp; currentNode !== rootParent) &#123;</span><br><span class="line">      <span class="keyword">const</span> overflowY = <span class="keyword">this</span>.getComputedStyle(currentNode).overflowY</span><br><span class="line">      <span class="keyword">if</span> (overflowY === <span class="string">'scroll'</span> || overflowY === <span class="string">'auto'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> currentNode</span><br><span class="line">      &#125;</span><br><span class="line">      currentNode = currentNode.parentNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rootParent</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getScrollTop (element) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'scrollTop'</span> <span class="keyword">in</span> element ? element.scrollTop : element.pageYOffset</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  setScrollTop (element, value) &#123;</span><br><span class="line">    <span class="string">'scrollTop'</span> <span class="keyword">in</span> element ? element.scrollTop = value : element.scrollTo(element.scrollX, value)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get distance from element top to page top</span></span><br><span class="line">  getElementTop (element) &#123;</span><br><span class="line">    <span class="keyword">return</span> (element === <span class="built_in">window</span> ? <span class="number">0</span> : element.getBoundingClientRect().top) + <span class="keyword">this</span>.getScrollTop(<span class="built_in">window</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getVisibleHeight (element) &#123;</span><br><span class="line">    <span class="keyword">return</span> element === <span class="built_in">window</span> ? element.innerHeight : element.getBoundingClientRect().height</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getComputedStyle: !Vue.prototype.$isServer &amp;&amp; <span class="built_in">document</span>.defaultView.getComputedStyle.bind(<span class="built_in">document</span>.defaultView),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em><a href="https://github.com/youzan/vant/blob/dev/packages/utils/scroll.ts" target="_blank" rel="noopener">点击查看最新源码</a></em></strong></p>
]]></content>
      <categories>
        <category>Util</category>
        <category>函数</category>
      </categories>
      <tags>
        <tag>Util</tag>
      </tags>
  </entry>
  <entry>
    <title>Ripple 水波纹效果</title>
    <url>/2019/03/05/wave/</url>
    <content><![CDATA[<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><div class="note info"><p>代码借鉴了 keen-ui 和 material-ui 的实现方式</p></div>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在日常项目中，经常会看到点击button或某个元素块时，有水波纹效果，如下图所示：</p>
<p><img src="/images/ripple.png" alt="ripple button"></p>
<p>下面，我们将分析如何实现这个效果</p>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>常见的波纹点击效果的实现方式是监听元素的 <code>mousedown、</code> <code>mouseup</code> 事件（pc端）, <code>touchstart</code> <code>touchend</code> 事件（mobile端），因为mouse事件和touch事件时优先于click事件的，并且有多个回调状态。</p>
<p>通过监听上述事件，在元素内部创建一个波纹元素，并调整元素的 <code>transform</code> 和 <code>opacity</code> 属性，通过计算点击的位置来设置波纹元素的大小和位置，已达到波纹扩散的效果。</p>
<p>我们讲组件分为2个部分，<code>circleRipple</code> 子组件 和 <code>ripple</code> 父组件：</p>
<ul>
<li><code>circleRipple</code> 为波纹扩散组件，由 <code>transition</code> 组件包裹来设置动画，实现波纹扩散效果</li>
<li><code>ripple</code> 父组件，监听 <code>mouse</code> 和 <code>touch</code> 相关事件来控制 <code>circleRipple</code> 的位置和显示</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="CircleRipple"><a href="#CircleRipple" class="headerlink" title="CircleRipple"></a>CircleRipple</h4><p>利用 vue 的 <code>transition</code> 组件的来完成 <code>circleRipple</code> 的动画效果，之所以设置为子组件，就是为了方便从外部通过传参来控制它的样式。实现代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;transition name=<span class="string">"ripple"</span>&gt;</span><br><span class="line">    &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"b()"</span> :style=<span class="string">"styles"</span>/&gt;</span><br><span class="line">  &lt;<span class="regexp">/transition&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'ripple-circle'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    styles: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>样式代码如下所示：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.ripple-circle</span><br><span class="line">  <span class="attribute">position</span>: absolute</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span></span><br><span class="line">  opacity: .1</span><br><span class="line">  <span class="attribute">background-color</span>: currentColor</span><br><span class="line">  <span class="attribute">background-clip</span>: padding-box</span><br><span class="line">  <span class="attribute">pointer-events</span>: none</span><br><span class="line">  user-select: <span class="attribute">none</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ripple-enter-active</span>,</span><br><span class="line">.ripple-leave-active</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>) scale(<span class="number">1</span>)</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">1s</span> ease-out, transform <span class="number">0.25s</span> ease-out</span><br><span class="line"></span><br><span class="line">.ripple-enter</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>) scale(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">.ripple-leave-to</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span> !important</span><br></pre></td></tr></table></figure>
<p>上述代码中有2个需要注意的属性：</p>
<ol>
<li>设置 <code>background-color: currentColor</code>, 使用该关键字的元素的（或其最近父元素）color属性的颜色值</li>
<li>设置 <code>background-clip: padding-box</code>, 使背景被裁剪到内边距框，不包含border</li>
</ol>
<h4 id="Ripple"><a href="#Ripple" class="headerlink" title="Ripple"></a>Ripple</h4><p><code>Ripple</code> 需要控制 <code>circleRipple</code> 的显示，如果频繁点击可能出现多个 circleRipple</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    :<span class="class"><span class="keyword">class</span></span>=<span class="string">"b()"</span></span><br><span class="line">    @contextmenu.prevent</span><br><span class="line">    @touchstart=<span class="string">"start"</span></span><br><span class="line">    @touchend=<span class="string">"end"</span></span><br><span class="line">    @touchcancel=<span class="string">"end"</span></span><br><span class="line">    @mousedown=<span class="string">"start"</span></span><br><span class="line">    @mouseup=<span class="string">"end"</span></span><br><span class="line">    @mouseleave=<span class="string">"end"</span></span><br><span class="line">  &gt;</span><br><span class="line">     &lt;!--多个波纹用 v-<span class="keyword">for</span> 控制--&gt; </span><br><span class="line">    &lt;ripple-circle v-<span class="keyword">for</span>=<span class="string">"ripple in ripples"</span> :key=<span class="string">"ripple.key"</span> :styles=<span class="string">"ripple.style"</span>/&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> RippleCircle <span class="keyword">from</span> <span class="string">'./ripple-circle'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hasTouchEvent = <span class="string">'ontouchstart'</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement</span><br><span class="line"><span class="keyword">let</span> rippleKey = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'ripple'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    RippleCircle,</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    rippleOpacity: &#123;</span><br><span class="line">      type: [<span class="built_in">Number</span>, <span class="built_in">String</span>],</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'0.15'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    rippleColor: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">''</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ripples: [],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    start (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (hasTouchEvent &amp;&amp; !e.touches) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">const</span> ripple = &#123;</span><br><span class="line">        key: rippleKey++,</span><br><span class="line">        style: <span class="keyword">this</span>.__calcRippleStyle(e),</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 增加一个波纹元素只需要在 ripples 数组中push一个 ripple 对象即可</span></span><br><span class="line">      <span class="keyword">this</span>.ripples.push(ripple)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    end (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((hasTouchEvent &amp;&amp; !e.touches) || <span class="keyword">this</span>.ripples.length === <span class="number">0</span>)       <span class="keyword">return</span></span><br><span class="line">      <span class="comment">// 删除数组中第一个一个波纹元素</span></span><br><span class="line">      <span class="keyword">this</span>.ripples.splice(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算波纹样式并返回</span></span><br><span class="line">    __calcRippleStyle (e) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; target &#125; = e</span><br><span class="line">      <span class="keyword">const</span> rect = target.getBoundingClientRect()</span><br><span class="line">      <span class="keyword">const</span> isTouchEvent = e.touches &amp;&amp; e.touches.length</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> pointerClientX = isTouchEvent ? <span class="built_in">Math</span>.floor(e.touches[<span class="number">0</span>].clientX) : e.clientX</span><br><span class="line">      <span class="keyword">const</span> pointerClientY = isTouchEvent ? <span class="built_in">Math</span>.floor(e.touches[<span class="number">0</span>].clientY) : e.clientY</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 计算点击位置在当前点击块中，距离上下左右边框的距离</span></span><br><span class="line">      <span class="keyword">const</span> left = pointerClientX - rect.left</span><br><span class="line">      <span class="keyword">const</span> top = pointerClientY - rect.top</span><br><span class="line">      <span class="keyword">const</span> right = rect.right - pointerClientX</span><br><span class="line">      <span class="keyword">const</span> bottom = rect.bottom - pointerClientY</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 计算点击位置距离四周边框的四个斜边长度</span></span><br><span class="line">      <span class="keyword">const</span> leftTopDiagLen = <span class="keyword">this</span>.__calcDiagLen(left, top)</span><br><span class="line">      <span class="keyword">const</span> rightTopDiagLen = <span class="keyword">this</span>.__calcDiagLen(right, top)</span><br><span class="line">      <span class="keyword">const</span> leftBottomDiagLen = <span class="keyword">this</span>.__calcDiagLen(left, bottom)</span><br><span class="line">      <span class="keyword">const</span> rightBottomDiagLen = <span class="keyword">this</span>.__calcDiagLen(right, bottom)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取上面计算四条斜边的最大边并向上取整，取得绘画波纹的半径</span></span><br><span class="line">      <span class="keyword">const</span> rippleCircleRadius = <span class="built_in">Math</span>.ceil(</span><br><span class="line">        <span class="built_in">Math</span>.max(</span><br><span class="line">          leftTopDiagLen,</span><br><span class="line">          rightTopDiagLen,</span><br><span class="line">          leftBottomDiagLen,</span><br><span class="line">          rightBottomDiagLen,</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">const</span> rippleCircleDiameter = rippleCircleRadius * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 确定波纹绘制的颜色、透明度、大小、位置</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        color: <span class="keyword">this</span>.rippleColor,</span><br><span class="line">        opacity: <span class="keyword">this</span>.rippleOpacity,</span><br><span class="line">        width: <span class="string">`<span class="subst">$&#123;rippleCircleDiameter&#125;</span>px`</span>,</span><br><span class="line">        height: <span class="string">`<span class="subst">$&#123;rippleCircleDiameter&#125;</span>px`</span>,</span><br><span class="line">        left: <span class="string">`<span class="subst">$&#123;left&#125;</span>px`</span>,</span><br><span class="line">        top: <span class="string">`<span class="subst">$&#123;top&#125;</span>px`</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算斜边长</span></span><br><span class="line">    __calcDiagLen (a, b) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(a * a + b * b)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：@contextmenu.prevent 表示鼠标右击时阻止浏览器打开默认的菜单选项</p>
</blockquote>
<p>针对上述代码的分析见下图所示：</p>
<p><img src="/images/ripple-circle.gif" alt="ripple-circle"></p>
<p>👇下面有一个在线的可操作水波纹示例（大家可以点击亵玩）：👇<br><a href="https://codepen.io/shellWolf/pen/vPyQJX?editors=1100" target="_blank" rel="noopener">https://codepen.io/shellWolf/pen/vPyQJX?editors=1100</a></p>
<p>样式代码如下所示：</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">.ripple</span><br><span class="line">  <span class="attribute">position</span>: absolute</span><br><span class="line">  <span class="attribute">overflow</span>: hidden</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">101%</span></span><br></pre></td></tr></table></figure>
<p>该组件通常与 <code>button</code> 、 <code>cell</code> 等组件结合使用。</p>
<blockquote>
<p>使用注意事项：由于 <code>Ripple</code> 组件内部都是 position:absolute 布局，使用时，需要在外部加上 position:relative<br>✨<strong><em>请点击查看 <a href="http://wechat.hand-china.com/hippius-ui/#/zh-CN/button" target="_blank" rel="noopener">DEMO</a> 效果（滚动到水波纹点击效果那一栏）</em></strong></p>
</blockquote>
<p><strong><em>附录 ✨</em></strong></p>
<ul>
<li><a href="/2019/03/01/bem/">b函数</a>分析</li>
<li><a href="https://blog.csdn.net/weixin_41342585/article/details/80659736" target="_blank" rel="noopener">clientX | pageX | …</a> 用法</li>
<li><a href="https://www.cnblogs.com/Songyc/p/4458570.html" target="_blank" rel="noopener">getBoundingClientRect</a> 用法</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
        <category>组件开发</category>
        <category>Ripple</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>组件</tag>
      </tags>
  </entry>
</search>
